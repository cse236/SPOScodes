import java.util.Scanner;

class RoundRobin {
    int burst[], run[], np, quantom = 0, wait[], time = 0, rp = 0, ta[];

    public RoundRobin() {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the number of processes: ");
        np = sc.nextInt();
        rp = np;
        burst = new int[np];
        run = new int[np];
        wait = new int[np];
        ta = new int[np];
        
        System.out.println("Enter the burst times for each process: ");
        for (int i = 0; i < np; i++) {
            burst[i] = sc.nextInt();
            run[i] = burst[i];
            wait[i] = 0;
        }
        
        System.out.println("Enter Quantum: ");
        quantom = sc.nextInt();
        logic();
    }

    public void logic() {
        int i = 0;
        while (rp != 0) {
            if (run[i] > quantom) {
                run[i] -= quantom;
                time += quantom;
                System.out.println("Process " + i + " time: " + time);
            } else if (run[i] <= quantom && run[i] > 0) {
                time += run[i];
                run[i] = 0;
                ta[i] = time;
                rp--;
                System.out.println("Process " + i + " time: " + time);
            }
            i++;
            if (i == np) i = 0;
        }
        System.out.println("\nProcess Turnaround Time Waiting Time");
        for (int j = 0; j < np; j++) {
            wait[j] = ta[j] - burst[j];
            System.out.println("P" + j + "\t" + ta[j] + "\t\t" + wait[j]);
        }
    }
}

class FCFS {
    public void executeFCFS() {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter number of processes: ");
        int n = sc.nextInt();
        int[] pid = new int[n];
        int[] ar = new int[n];
        int[] bt = new int[n];
        int[] ct = new int[n];
        int[] ta = new int[n];
        int[] wt = new int[n];
        float avgwt = 0, avgta = 0;

        for (int i = 0; i < n; i++) {
            System.out.println("Enter process " + (i + 1) + " arrival time: ");
            ar[i] = sc.nextInt();
            System.out.println("Enter process " + (i + 1) + " burst time: ");
            bt[i] = sc.nextInt();
            pid[i] = i + 1;
        }

        // Sorting by arrival time
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n - (i + 1); j++) {
                if (ar[j] > ar[j + 1]) {
                    int temp = ar[j];
                    ar[j] = ar[j + 1];
                    ar[j + 1] = temp;
                    temp = bt[j];
                    bt[j] = bt[j + 1];
                    bt[j + 1] = temp;
                    temp = pid[j];
                    pid[j] = pid[j + 1];
                    pid[j + 1] = temp;
                }
            }
        }

        for (int i = 0; i < n; i++) {
            if (i == 0) {
                ct[i] = ar[i] + bt[i];
            } else {
                if (ar[i] > ct[i - 1]) {
                    ct[i] = ar[i] + bt[i];
                } else {
                    ct[i] = ct[i - 1] + bt[i];
                }
            }
            ta[i] = ct[i] - ar[i];
            wt[i] = ta[i] - bt[i];
            avgwt += wt[i];
            avgta += ta[i];
        }

        System.out.println("\nProcess Arrival Burst Complete Turnaround Waiting");
        for (int i = 0; i < n; i++) {
            System.out.println(pid[i] + "\t" + ar[i] + "\t" + bt[i] + "\t" + ct[i] + "\t" + ta[i] + "\t" + wt[i]);
        }
        
        System.out.println("\nAverage waiting time: " + (avgwt / n));
        System.out.println("Average turnaround time: " + (avgta / n));
    }
}

public class SchedulerMenu {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        while (true) {
            System.out.println("\nSelect Scheduling Algorithm:");
            System.out.println("1. FCFS");
            System.out.println("2. Round Robin");
            System.out.println("3. Exit");
            System.out.print("Choice: ");
            int choice = sc.nextInt();
            switch (choice) {
                case 1:
                    FCFS fcfs = new FCFS();
                    fcfs.executeFCFS();
                    break;
                case 2:
                    new RoundRobin();
                    break;
                case 3:
                    System.out.println("Exiting...");
                    System.exit(0);
                    break;
                default:
                    System.out.println("Invalid choice. Please select again.");
            }
        }
    }
}
